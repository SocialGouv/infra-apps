apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: {{ include "common.names.fullname" . }}
    application: {{ include "common.names.fullname" . }}
  name: {{ include "common.names.fullname" . }}
  annotations:
    {{ if .Values.annotations }}
    {{ range $key, $val := .Values.annotations }}
    "{{ $key }}": {{ $val | quote }}
    {{ end }}
    {{ end }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      component: {{ include "common.names.fullname" . }}
  template:
    metadata:
      labels:
        component: {{ include "common.names.fullname" . }}
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        runAsNonRoot: true
      containers:
        - image: {{ .Values.image.name }}:{{ .Values.image.tag }}
          name: metabase
          securityContext:
            allowPrivilegeEscalation: false
          env:
            - name: MB_DB_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ or .Values.dbhost.secretName (print (include "common.names.fullname" .) "-app") }}
                  key: {{ .Values.dbhost.secretKey }}
            - name: MB_DB_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ or .Values.dbport.secretName (print (include "common.names.fullname" .) "-app") }}
                  key: {{ .Values.dbport.secretKey }}
            - name: MB_DB_DBNAME
              valueFrom:
                secretKeyRef:
                  name: {{ or .Values.dbname.secretName (print (include "common.names.fullname" .) "-app") }}
                  key: {{ .Values.dbname.secretKey }}
            - name: MB_DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ or .Values.dbuser.secretName (print (include "common.names.fullname" .) "-app") }}
                  key: {{ .Values.dbuser.secretKey }}
            - name: MB_DB_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ or .Values.dbpass.secretName (print (include "common.names.fullname" .) "-app") }}
                  key: {{ .Values.dbpass.secretKey }}
            {{- if gt (len .Values.env) 0 }}
            {{- tpl (.Values.env | toYaml) . | nindent 12 }}
            {{- end }}
          envFrom:
            - configMapRef:
                name: {{ include "common.names.fullname" . }}
            - secretRef:
                name: {{ .Values.secretName }}
            {{- if gt (len .Values.envFrom) 0 }}
            {{- tpl (.Values.envFrom | toYaml) . | nindent 12 }}
            {{- end }}
          ports:
            - containerPort: 3000
              name: http
          startupProbe:
            failureThreshold: 30
            httpGet:
              path: /api/health
              port: http
            periodSeconds: 10
            initialDelaySeconds: 60
            successThreshold: 1
            timeoutSeconds: 10
          readinessProbe:
            failureThreshold: 15
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 1
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          livenessProbe:
            failureThreshold: 6
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 5
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}